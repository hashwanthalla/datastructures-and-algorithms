package datastructures;

public class SinglyLinkedList {
private ListNode head;
public static class ListNode
{
	private int data;
	private ListNode next;
	public ListNode(int data)
	{
		this.data=data;
		this.next=null;
	}
}
public void display()
{
	ListNode current=head;
	while(current!=null)
	{
		System.out.println(current.data);
		current=current.next;
	}
}
public void length()
{
	int count=0;
    ListNode current =head;	
   	while(current!=null)
	{
		count++;
		current=current.next;
	}
	System.out.println(count);
	
}
public void insertatfirst(int data)
{
  ListNode Node=new ListNode(data);
  Node.next=head;
  head=Node;
}
public void insertatLast(int data)
{
	ListNode Node=new ListNode(data);
	
	if(head==null)
	{
		head=Node;
	}
	else
	{
	ListNode current=head;
	while(current.next!=null)
	{
		current=current.next;
	}
	current.next=Node;
	}
}
public boolean search(int data)
{
	
	ListNode current=head;
	while(current!=null)
	{
		if(current.data==data)
		{
			return true;
		}
		
		current=current.next;
	}
	return false;
}
public ListNode reverseaLinkedList()
{
	ListNode current=head;
	ListNode previous=null;
	ListNode next=null;
	while(current!=null)
	{
		next=current.next;
		current.next=previous;
		previous=current;
		current=next;
	}
	return previous;
	
}
public ListNode midvalue()
{
	ListNode fstpntr=head;
	ListNode slwpntr=head;
	while(fstpntr!=null&&fstpntr.next!=null)
	{
		slwpntr=slwpntr.next;
		fstpntr=fstpntr.next.next;
	}
	return slwpntr;
	
}
public ListNode nthnode(int value)
{
	ListNode ref=head;
    ListNode main=head;
    int count=0;
	while(count<value)
	{
		ref=ref.next;
		count++;
	}
	while(ref!=null)
	{
		main=main.next;
		ref=ref.next;
	}
	return main;
	
}
public void deleteduplicates()
{
	ListNode n=head;
	while(n!=null&&n.next!=null)
	{
		if(n.data==n.next.data)
		{
			n.next=n.next.next;
		}
		else
		{
			n=n.next;
		}
	}
	}
public void insertdesiredp(int value)
{
	ListNode n=new ListNode(value);
	ListNode n1=head;
	ListNode temp;
	if(head==null)
	{
	   head=n;
	}
	if(n.data<n1.data)
	{
		
		n.next=head;
		head=n;
		return;
		
		
	}
    
	while(n1.next!=null)
	{
		if(n.data<n1.next.data)
		{
			temp=n1.next;
			n1.next=n;
			n.next=temp;
			return;
			
		}
		n1=n1.next;
	}
	n1.next=n;
	
			
}
public void removat(int val)
{
	ListNode n=head;
	int c=0;
	while(c<val-1)
	{
		n=n.next;
		c++;
	}
	n.next=n.next.next;
}
public boolean cyclic()
{
	ListNode n=head;
	ListNode n1=head;
	while(n1!=null&&n1.next!=null)
	{
		n=n.next;
		n1=n1.next.next;
		if(n==n1)
		{
			return true;
		}
	}
	return false;
	
}
public static void main(String[]args)
{
	SinglyLinkedList sll=new SinglyLinkedList();
	
//	sll.head=new ListNode(10);
//	ListNode second=new ListNode(1);
//	ListNode third=new ListNode(8);
//	ListNode fourth=new ListNode(9);
//	sll.head.next=second;
//	second.next=third;
//	third.next=fourth;
	ListNode first = new ListNode(1);
	ListNode second = new ListNode(2);
	ListNode third = new ListNode(3);
	ListNode fourth = new ListNode(4);
	ListNode fifth = new ListNode(5);
	ListNode sixth = new ListNode(6);
//	sll.insertatLast(1);
//	sll.insertatLast(2);
//	sll.insertatLast(3);
//	sll.insertatLast(4);
//	sll.insertatLast(7);
//	sll.deleteduplicates();
//	sll.insertdesiredp(6);
//	sll.removat(3);
	sll.head = first;
	first.next = second;
	second.next = third;
	third.next = fourth;
	fourth.next = fifth;
	fifth.next = sixth;
	sixth.next = third;
	System.out.print(sll.cyclic());
//	sll.display();
	//sll.length();
//	System.out.println(sll.search(88));
//	System.out.println(sll.search(3));
//	sll.head=sll.reverseaLinkedList();
//	ListNode mid=sll.midvalue();
//	ListNode nthnodefrmend=sll.nthnode(3);
//	System.out.println(mid.data);
//	System.out.println(nthnodefrmend.data);
	
}
	
}
